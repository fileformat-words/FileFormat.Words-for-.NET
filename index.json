{
  "README.html": {
    "href": "README.html",
    "title": "FileFormat.Words for .NET | Words FileFormat",
    "keywords": "FileFormat.Words for .NET FileFormat.Words for .NET - A versatile API for creating, loading, and modifying MS Word documents. Table of Contents What does this project do? Why is this project useful? How do I get started? Where can I get more help, if I need it? License What does this project do? FileFormat.Words for .NET is an open-source API designed to streamline the process of working with Microsoft Word documents. The API wraps various open-source engines, including the OpenXML SDK, to provide a unified and user-friendly interface for creating, loading, and modifying Word documents. Whether you're building applications that generate reports, automate document workflows, or enhance document management systems, FileFormat.Words for .NET aims to simplify the integration of MS Word document functionality. Why is this project useful? Versatility: FileFormat.Words for .NET supports a range of operations, making it versatile for different use cases, such as document generation, template management, and content manipulation. Interoperability: By leveraging established open-source engines like the OpenXML SDK, this API ensures compatibility with Microsoft Word standards, fostering seamless interoperability. Open Source: Being an open-source project, FileFormat.Words for .NET encourages collaboration and contributions from the community. Developers can tailor the API to their specific needs and contribute enhancements for the benefit of all. How do I get started? To get started with FileFormat.Words for .NET, follow these steps: Installation: Clone the repository to your local machine. OR Install via Nuget. For more information, please check out Installation. Usage: Explore the documentation. Check out the examples for sample code snippets to kickstart your integration. Contribution: If you find issues or have improvements, feel free to open a GitHub issue or submit a pull request. Where can I get more help, if I need it? If you need assistance or have questions, you can reach out in the following ways: Documentation: Refer to the documentation for detailed information on API usage and features. GitHub Issues: Open a GitHub issue to report bugs, suggest enhancements, or seek help. Community: Join our community to connect with other developers and discuss FileFormat.Words for .NET. License This project is licensed under the MIT License - see the LICENSE file for details."
  },
  "api/FileFormat.Words.Body.html": {
    "href": "api/FileFormat.Words.Body.html",
    "title": "Body Class - Word Document Body | Words FileFormat",
    "keywords": "Class Body Namespace FileFormat.Words Assembly FileFormat.Words.dll Represents the body of a document, containing paragraphs, tables, images, and sections. public class Body Inheritance object Body Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Body(Document) Initializes a new instance of the Body class with the specified document. public Body(Document doc) Parameters doc Document The parent document containing the body. Properties Images Gets the list of images in the body. public List<Image> Images { get; } Property Value List<Image> Paragraphs Gets the list of paragraphs in the body. public List<Paragraph> Paragraphs { get; } Property Value List<Paragraph> Sections Gets the list of sections in the body. public List<Section> Sections { get; } Property Value List<Section> Tables Gets the list of tables in the body. public List<Table> Tables { get; } Property Value List<Table> Methods AppendChild(IElement) Appends a child element to the body. public int AppendChild(IElement element) Parameters element IElement The element to append to the body. Returns int The unique identifier ElementId of the appended element."
  },
  "api/FileFormat.Words.Document.html": {
    "href": "api/FileFormat.Words.Document.html",
    "title": "Document Class - Microsoft Word Document | Words FileFormat",
    "keywords": "Class Document Namespace FileFormat.Words Assembly FileFormat.Words.dll Represents a document with structured elements. public class Document : IDisposable Inheritance object Document Implements IDisposable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Document() Initializes a new instance of the Document class. This constructor creates a new, empty document. public Document() Examples // Create a new, empty document Document Doc = new Document(); // Initialize a new instance of body the empty document. Body body = new Body(doc); // Add paragraph wiht run Paragraph para = new Paragraph(); para.AddRun(new FF.Run { Text = \"First Run with Times New Roman Blue Color Bold\", FontFamily = \"Times New Roman\", Color = FF.Colors.Blue, Bold = true, FontSize = 12 }); // Append paragraph to the document body.AppendChild(para); // Save document to file. doc.Save(\"DocumentWithPara.docx\"); Remarks Use this constructor to create a new, blank document that you can populate with content. To work with an existing document, consider using the Document(string) constructor. Document(Stream) Initializes a new instance of the Document class by loading content from a Stream. public Document(Stream stream) Parameters stream Stream The input stream from which to load the document content. Exceptions FileFormatException Thrown if an error occurs while loading the document. Document(string) Initializes a new instance of the Document class by loading content from a file specified by its filename. public Document(string filename) Parameters filename string The path to the file from which to load the document content. Exceptions FileFormatException Thrown if an error occurs while loading the document. Methods Dispose() Dispose off all managed and unmanaged resources. public void Dispose() Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool GetElementStyles() Gets the element styles of the document. public ElementStyles GetElementStyles() Returns ElementStyles GetElements() Retrieves a list of existing elements from the internal data structure. public List<IElement> GetElements() Returns List<IElement> A list of IElement objects representing the existing elements. See Also IElement InsertAfter(IElement, IElement) Inserts an element after a specified element in the structure. public int InsertAfter(IElement newElement, IElement element) Parameters newElement IElement The element to be inserted. element IElement The element after which the new element should be inserted. Returns int The unique identifier ElementId if the new element is successfully inserted after the specified element. If the specified element is not found, -1 is returned. If an error occurs during the insertion operation, a FileFormatException is thrown. Remarks This method inserts the specified element after the provided element in the structure. The method attempts to locate the specified element by comparing their unique IDs. If the insertion operation is successful, the method returns ElementId of the inserted element. If the specified element is not found, -1 is returned, and no changes are made to the structure. If an exception occurs during the insertion operation, the method attempts to restore the structure to its previous state and throws a FileFormatException with detailed error information. InsertAfter(IElement, int) Inserts an element after a specified element in the structure by its unique ID. public int InsertAfter(IElement newElement, int elementId) Parameters newElement IElement The element to be inserted. elementId int The unique ID of the element after which the new element should be inserted. Returns int The unique identifier ElementId of the inserted element if the new element is successfully inserted after the specified element. If the specified element is not found, -1 is returned. If an error occurs during the insertion operation, a FileFormatException is thrown. Remarks This method inserts the specified element after the element with the provided unique ID in the structure. It is important to ensure that the specified element exists in the structure to determine the insertion point. If the insertion operation is successful, the method returns ElementId of the inserted element. If the specified element is not found, -1 is returned, and no changes are made to the structure. If an exception occurs during the insertion operation, the method attempts to restore the structure to its previous state and throws a FileFormatException with detailed error information. InsertBefore(IElement, IElement) Inserts an element before the specified reference element. public int InsertBefore(IElement newElement, IElement element) Parameters newElement IElement The element to be inserted. element IElement The reference element before which the new element should be inserted. Returns int The unique identifier ElementId of inserted element if the new element is successfully inserted before the reference element. If the reference element is not found in the structure, -1 is returned. If an error occurs during the insertion operation, a FileFormatException is thrown. Remarks This method inserts the specified element before the provided reference element in the structure. The method attempts to locate the reference element and insert the new element before it. If the insertion operation is successful, the method returns ElementId of the inserted element. If the reference element is not found, -1 is returned, and no changes are made to the structure. If an exception occurs during the insertion operation, the method attempts to restore the structure to its previous state and throws a FileFormatException with detailed error information. InsertBefore(IElement, int) Inserts an element before the element with the specified unique ID. public int InsertBefore(IElement newElement, int elementId) Parameters newElement IElement The element to be inserted. elementId int The unique ID of the element before which the new element should be inserted. Returns int The unique identifier ElementId of the inserted element if the new element is successfully inserted before the specified element. If the specified element with the provided ID is not found, -1 is returned. If an error occurs during the insertion operation, a FileFormatException is thrown. Remarks This method inserts the specified element before the element with the provided unique ID in the structure. The method attempts to locate the element with the specified ID and insert the new element before it. If the insertion operation is successful, the method returns ElementId of the inserted element. If the element with the specified ID is not found, -1 is returned, and no changes are made to the structure. If an exception occurs during the insertion operation, the method attempts to restore the structure to its previous state and throws a FileFormatException with detailed error information. Remove(int) Removes the specified element with the given ElementID from the document. public bool Remove(int elementId) Parameters elementId int The unique identifier of the element you want to remove. Returns bool true if the element is successfully removed; otherwise, false if the element is not found. Throws a FileFormatException if an exception occurs during the operation. Remarks If the specified element is not found in the document, this method returns false. If the removal of the element fails due to an exception, it rolls back the operation and reverts the document to its original state. The element is removed from the internal document structure and, if applicable, the underlying OOXML document. RemoveAfter(IElement) Removes the element that follows a specified element in the structure. public bool RemoveAfter(IElement element) Parameters element IElement The element whose follower should be removed. Returns bool true if the element following the specified element is successfully removed; otherwise, false. If the specified element is not found or if there is no element following it, false is returned. If an error occurs during the removal operation, a FileFormatException is thrown. Remarks This method removes the element that comes after the specified element in the structure. It is essential to ensure that the specified element exists in the structure and has an element following it. If the removal operation is successful, the method returns true. If the element is not found or there is no element following it, false is returned, and no changes are made to the structure. If an exception occurs during the removal operation, the method attempts to restore the structure to its previous state and throws a FileFormatException with detailed error information. RemoveAfter(int) Removes the element that follows a specified element in the structure by its unique ID. public bool RemoveAfter(int elementId) Parameters elementId int The unique ID of the element whose follower should be removed. Returns bool true if the element following the specified element is successfully removed; otherwise, false. If the specified element is not found or if there is no element following it, false is returned. If an error occurs during the removal operation, a FileFormatException is thrown. Remarks This method removes the element that comes after the specified element with the provided unique ID in the structure. It is essential to ensure that the specified element exists in the structure and has an element following it. If the removal operation is successful, the method returns true. If the element is not found or there is no element following it, false is returned, and no changes are made to the structure. If an exception occurs during the removal operation, the method attempts to restore the structure to its previous state and throws a FileFormatException with detailed error information. RemoveBefore(IElement) Removes the element that precedes the specified element from the collection. If the specified element is not found or is the first element in the collection, no removal occurs. public bool RemoveBefore(IElement element) Parameters element IElement The element whose predecessor should be removed. Returns bool true if the preceding element is successfully removed; otherwise, false if the element is not found. Throws a FileFormatException if an exception occurs during the operation. Remarks The method searches for the element with the specified element identifier and removes the element that immediately precedes it in the collection. If the specified element is not found or is the first element in the collection, no removal occurs, and the method returns -1. In case of success, it returns the ElementId of removed element. If the removal of the preceding element fails due to an exception, it rolls back the operation and reverts the document to its original state. See Also ElementId RemoveBefore(int) Removes the element that precedes the specified element with the given ElementID in the document. public bool RemoveBefore(int elementId) Parameters elementId int The unique identifier of the element after which you want to remove the preceding element. Returns bool true if the preceding element is successfully removed; otherwise, false if the element is not found. Throws a FileFormatException if an exception occurs during the operation. Remarks If the specified element is not found in the document, this method returns false. If the removal of the preceding element fails due to an exception, it rolls back the operation and reverts the document to its original state. The preceding element is removed from the internal document structure and, if applicable, the underlying OOXML document. Save(Stream) Saves the document to the specified Stream. public void Save(Stream stream) Parameters stream Stream The stream to which the document will be saved. Exceptions FileFormatException Thrown if an error occurs while saving the document. Save(string) Saves the document to a file specified by its filename. public void Save(string filename) Parameters filename string The path to the file where the document will be saved. Exceptions FileFormatException Thrown if an error occurs while saving the document. Update(IElement) Updates an existing element in the structure. public bool Update(IElement element) Parameters element IElement The updated element to replace the existing one. Returns bool true if the element is successfully updated; otherwise, false. If the element is not found in the structure, false is returned. If an error occurs during the update operation, a FileFormatException is thrown. Remarks This method updates an existing element within the structure based on the element's unique identifier. It locates the element in the structure and replaces it with the updated element. If the update operation is successful, the method returns true>. If the element is not found in the structure, false is returned, and no changes are made to the structure. If an exception occurs during the update operation, the method attempts to restore the structure to its previous state and throws a FileFormatException with detailed error information. Update(int, IElement) Updates an existing element in the structure. public bool Update(int elementId, IElement element) Parameters elementId int The unique identifier of the element to be updated. element IElement The updated element to replace the existing one. Returns bool true if the element is successfully updated; otherwise, false. If the element with the specified ID is not found in the structure, false is returned. If the elements' IDs do not match, a FileFormatException is thrown. If an error occurs during the update operation, a FileFormatException is thrown. Remarks This method updates an existing element within the structure based on the provided element's unique identifier. It verifies that the element to be updated has the same ID as the specified element ID. If the IDs match, the method attempts to locate the element in the structure and replace it with the updated element. If the update operation is successful, the method returns true>. If the element with the specified ID is not found, false is returned, and no changes are made to the structure. If the provided element's ID does not match the specified element ID, a FileFormatException is thrown. If an exception occurs during the update operation, the method attempts to restore the structure to its previous state and throws a FileFormatException with detailed error information."
  },
  "api/FileFormat.Words.FileFormatException.html": {
    "href": "api/FileFormat.Words.FileFormatException.html",
    "title": "Class FileFormatException | Words FileFormat",
    "keywords": "Class FileFormatException Namespace FileFormat.Words Assembly FileFormat.Words.dll Custom exception class for file format-related exceptions. public class FileFormatException : Exception, ISerializable Inheritance object Exception FileFormatException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.StackTrace Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors FileFormatException(string, Exception) Initializes a new instance of the FileFormatException class with a specified error message and a reference to the inner exception. public FileFormatException(string message, Exception innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception, or a null reference if no inner exception is specified."
  },
  "api/FileFormat.Words.IElements.Cell.html": {
    "href": "api/FileFormat.Words.IElements.Cell.html",
    "title": "Class Cell | Words FileFormat",
    "keywords": "Class Cell Namespace FileFormat.Words.IElements Assembly FileFormat.Words.dll Represents a cell within a row of a table in a Word document. public class Cell Inheritance object Cell Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Cell() Initializes a new instance of the Cell class with empty paragraphs. public Cell() Properties Paragraphs Gets or sets the list of paragraphs within the cell. public List<Paragraph> Paragraphs { get; set; } Property Value List<Paragraph>"
  },
  "api/FileFormat.Words.IElements.Colors.html": {
    "href": "api/FileFormat.Words.IElements.Colors.html",
    "title": "Class Colors | Words FileFormat",
    "keywords": "Class Colors Namespace FileFormat.Words.IElements Assembly FileFormat.Words.dll Provides predefined colors with hexadecimal values. public static class Colors Inheritance object Colors Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Aqua Gets the hexadecimal value for the color Aqua (00FFFF). public static string Aqua { get; } Property Value string Black Gets the hexadecimal value for the color Black (000000). public static string Black { get; } Property Value string Blue Gets the hexadecimal value for the color Blue (0000FF). public static string Blue { get; } Property Value string Cyan Gets the hexadecimal value for the color Cyan (00FFFF). public static string Cyan { get; } Property Value string Fuchsia Gets the hexadecimal value for the color Fuchsia (FF00FF). public static string Fuchsia { get; } Property Value string Gray Gets the hexadecimal value for the color Gray (808080). public static string Gray { get; } Property Value string Green Gets the hexadecimal value for the color Green (00FF00). public static string Green { get; } Property Value string Lime Gets the hexadecimal value for the color Lime (00FF00). public static string Lime { get; } Property Value string LimeGreen Gets the hexadecimal value for the color Silver (C0C0C0). public static string LimeGreen { get; } Property Value string Magenta Gets the hexadecimal value for the color Magenta (FF00FF). public static string Magenta { get; } Property Value string Maroon Gets the hexadecimal value for the color Maroon (800000). public static string Maroon { get; } Property Value string Navy Gets the hexadecimal value for the color Navy (000080). public static string Navy { get; } Property Value string Olive Gets the hexadecimal value for the color Olive (808000). public static string Olive { get; } Property Value string Orange Gets the hexadecimal value for the color Orange (FFA500). public static string Orange { get; } Property Value string Purple Gets the hexadecimal value for the color Purple (800080). public static string Purple { get; } Property Value string Red Gets the hexadecimal value for the color Red (FF0000). public static string Red { get; } Property Value string Silver Gets the hexadecimal value for the color Silver (C0C0C0). public static string Silver { get; } Property Value string Teal Gets the hexadecimal value for the color Green (008000). public static string Teal { get; } Property Value string White Gets the hexadecimal value for the color White (FFFFFF). public static string White { get; } Property Value string Yellow Gets the hexadecimal value for the color Yellow (FFFF00). public static string Yellow { get; } Property Value string"
  },
  "api/FileFormat.Words.IElements.Column.html": {
    "href": "api/FileFormat.Words.IElements.Column.html",
    "title": "Class Column | Words FileFormat",
    "keywords": "Class Column Namespace FileFormat.Words.IElements Assembly FileFormat.Words.dll Represents column properties of a table in a Word document. public class Column Inheritance object Column Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Column() Initializes a new instance of the Column class with a default width of 0. public Column() Properties Width Gets or sets the width of the column. public int Width { get; set; } Property Value int"
  },
  "api/FileFormat.Words.IElements.ElementStyles.html": {
    "href": "api/FileFormat.Words.IElements.ElementStyles.html",
    "title": "Class ElementStyles | Words FileFormat",
    "keywords": "Class ElementStyles Namespace FileFormat.Words.IElements Assembly FileFormat.Words.dll Represents Styles associated with different elements. public class ElementStyles Inheritance object ElementStyles Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ElementStyles() Initializes all Styles. public ElementStyles() Properties ParagraphStyles Gets the Paragraph Styles public List<string> ParagraphStyles { get; } Property Value List<string> TableFonts Gets the fonts defined in FontTable public List<string> TableFonts { get; } Property Value List<string> TableStyles Gets the Table Styles public List<string> TableStyles { get; } Property Value List<string> ThemeFonts Gets the fonts defined in theme. public List<string> ThemeFonts { get; } Property Value List<string>"
  },
  "api/FileFormat.Words.IElements.Headings.html": {
    "href": "api/FileFormat.Words.IElements.Headings.html",
    "title": "Class Headings | Words FileFormat",
    "keywords": "Class Headings Namespace FileFormat.Words.IElements Assembly FileFormat.Words.dll Provides predefined heading styles. public static class Headings Inheritance object Headings Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Heading1 Gets the value representing Heading1. public static string Heading1 { get; } Property Value string Heading2 Gets the value representing Heading2. public static string Heading2 { get; } Property Value string Heading3 Gets the value representing Heading3. public static string Heading3 { get; } Property Value string Heading4 Gets the value representing Heading4. public static string Heading4 { get; } Property Value string Heading5 Gets the value representing Heading5. public static string Heading5 { get; } Property Value string Heading6 Gets the value representing Heading6. public static string Heading6 { get; } Property Value string Heading7 Gets the value representing Heading7. public static string Heading7 { get; } Property Value string Heading8 Gets the value representing Heading8. public static string Heading8 { get; } Property Value string Heading9 Gets the value representing Heading9. public static string Heading9 { get; } Property Value string"
  },
  "api/FileFormat.Words.IElements.IElement.html": {
    "href": "api/FileFormat.Words.IElements.IElement.html",
    "title": "Interface IElement | Words FileFormat",
    "keywords": "Interface IElement Namespace FileFormat.Words.IElements Assembly FileFormat.Words.dll Represents an element in a Word document. public interface IElement Properties ElementId Gets the unique identifier of the element. int ElementId { get; } Property Value int"
  },
  "api/FileFormat.Words.IElements.Image.html": {
    "href": "api/FileFormat.Words.IElements.Image.html",
    "title": "Class Image | Words FileFormat",
    "keywords": "Class Image Namespace FileFormat.Words.IElements Assembly FileFormat.Words.dll Represents an image element in a Word document. public class Image : IElement Inheritance object Image Implements IElement Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Image() public Image() Properties ElementId Gets the unique identifier of the image. public int ElementId { get; } Property Value int Height Gets or sets the height of the image. public int Height { get; set; } Property Value int ImageData Gets or sets the binary image data. public byte[] ImageData { get; set; } Property Value byte[] Width Gets or sets the width of the image. public int Width { get; set; } Property Value int"
  },
  "api/FileFormat.Words.IElements.Indentation.html": {
    "href": "api/FileFormat.Words.IElements.Indentation.html",
    "title": "Class Indentation | Words FileFormat",
    "keywords": "Class Indentation Namespace FileFormat.Words.IElements Assembly FileFormat.Words.dll Represents the indentation settings for a paragraph. public class Indentation Inheritance object Indentation Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Indentation() public Indentation() Properties FirstLine Gets or sets the distance of the first line indentation. public double FirstLine { get; set; } Property Value double Hanging Gets or sets the distance of the hanging indentation. public double Hanging { get; set; } Property Value double Left Gets or sets the distance of the left indentation. public double Left { get; set; } Property Value double Right Gets or sets the distance of the right indentation. public double Right { get; set; } Property Value double"
  },
  "api/FileFormat.Words.IElements.PageMargin.html": {
    "href": "api/FileFormat.Words.IElements.PageMargin.html",
    "title": "Class PageMargin | Words FileFormat",
    "keywords": "Class PageMargin Namespace FileFormat.Words.IElements Assembly FileFormat.Words.dll Represents the page margin properties of a section in a Word document. public class PageMargin Inheritance object PageMargin Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Bottom Gets the bottom margin of the page. public int Bottom { get; } Property Value int Footer Gets the footer margin of the page. public int Footer { get; } Property Value int Header Gets the header margin of the page. public int Header { get; } Property Value int Left Gets the left margin of the page. public int Left { get; } Property Value int Right Gets the right margin of the page. public int Right { get; } Property Value int Top Gets the top margin of the page. public int Top { get; } Property Value int"
  },
  "api/FileFormat.Words.IElements.PageSize.html": {
    "href": "api/FileFormat.Words.IElements.PageSize.html",
    "title": "Class PageSize | Words FileFormat",
    "keywords": "Class PageSize Namespace FileFormat.Words.IElements Assembly FileFormat.Words.dll Represents the page size properties of a section in a Word document. public class PageSize Inheritance object PageSize Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Height Gets sets the height of the page. public int Height { get; } Property Value int Orientation Gets the orientation of the page (e.g., \"Portrait\" or \"Landscape\"). public string Orientation { get; } Property Value string Width Gets the width of the page. public int Width { get; } Property Value int"
  },
  "api/FileFormat.Words.IElements.Paragraph.html": {
    "href": "api/FileFormat.Words.IElements.Paragraph.html",
    "title": "Class Paragraph | Words FileFormat",
    "keywords": "Class Paragraph Namespace FileFormat.Words.IElements Assembly FileFormat.Words.dll Represents a paragraph element in a Word document. public class Paragraph : IElement Inheritance object Paragraph Implements IElement Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Paragraph() Initializes a new instance of the Paragraph class. public Paragraph() Properties Alignment Gets or Sets Alignment of the word paragraph public ParagraphAlignment Alignment { get; set; } Property Value ParagraphAlignment ElementId Gets the unique identifier of the paragraph. public int ElementId { get; } Property Value int Indentation Gets or Sets Indentation of the word paragraph public Indentation Indentation { get; set; } Property Value Indentation IsAlphabeticNumber Gets or sets whether the paragraph has alphabetic number bullets. public bool IsAlphabeticNumber { get; set; } Property Value bool IsBullet Gets or sets whether the paragraph has bullet points. public bool IsBullet { get; set; } Property Value bool IsNumbered Gets or sets whether the paragraph has numbered bullets. public bool IsNumbered { get; set; } Property Value bool IsRoman Gets or sets whether the paragraph has roman number bullets. public bool IsRoman { get; set; } Property Value bool NumberingId Gets or sets the numbering ID for the paragraph. public int? NumberingId { get; set; } Property Value int? NumberingLevel Gets or sets the numbering level for the paragraph. public int? NumberingLevel { get; set; } Property Value int? Runs Gets the list of runs (text fragments) within the paragraph. public List<Run> Runs { get; } Property Value List<Run> Style Gets or sets the style of the paragraph. public string Style { get; set; } Property Value string Text Gets or sets the text content of the paragraph. public string Text { get; } Property Value string Methods AddRun(Run) Adds a run (text fragment) to the paragraph and sets its parent paragraph. public void AddRun(Run run) Parameters run Run The run to add to the paragraph."
  },
  "api/FileFormat.Words.IElements.ParagraphAlignment.html": {
    "href": "api/FileFormat.Words.IElements.ParagraphAlignment.html",
    "title": "Enum ParagraphAlignment | Words FileFormat",
    "keywords": "Enum ParagraphAlignment Namespace FileFormat.Words.IElements Assembly FileFormat.Words.dll Specifies the alignment of a paragraph within a text block or document. public enum ParagraphAlignment Fields Center = 1 Centers the paragraph within the available space. Justify = 3 Justifies the text within the paragraph, aligning both the left and right edges. Left = 0 Aligns the paragraph to the left. Right = 2 Aligns the paragraph to the right."
  },
  "api/FileFormat.Words.IElements.Row.html": {
    "href": "api/FileFormat.Words.IElements.Row.html",
    "title": "Class Row | Words FileFormat",
    "keywords": "Class Row Namespace FileFormat.Words.IElements Assembly FileFormat.Words.dll Represents a row within a table in a Word document. public class Row Inheritance object Row Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Row() Initializes a new instance of the Row class with empty cells. public Row() Properties Cells Gets or sets the list of cells within the row. public List<Cell> Cells { get; set; } Property Value List<Cell>"
  },
  "api/FileFormat.Words.IElements.Run.html": {
    "href": "api/FileFormat.Words.IElements.Run.html",
    "title": "Class Run | Words FileFormat",
    "keywords": "Class Run Namespace FileFormat.Words.IElements Assembly FileFormat.Words.dll Represents a run of text within a paragraph. public class Run Inheritance object Run Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Run() public Run() Properties Bold Gets or sets whether the run's text is bold. public bool Bold { get; set; } Property Value bool Color Gets or sets the color of the run's text. public string Color { get; set; } Property Value string FontFamily Gets or sets the font family of the run. public string FontFamily { get; set; } Property Value string FontSize Gets or sets the font size of the run. public int FontSize { get; set; } Property Value int Italic Gets or sets whether the run's text is italic. public bool Italic { get; set; } Property Value bool Text Gets or sets the text content of the run. public string Text { get; set; } Property Value string Underline Gets or sets whether the run's text is underlined. public bool Underline { get; set; } Property Value bool"
  },
  "api/FileFormat.Words.IElements.Section.html": {
    "href": "api/FileFormat.Words.IElements.Section.html",
    "title": "Class Section | Words FileFormat",
    "keywords": "Class Section Namespace FileFormat.Words.IElements Assembly FileFormat.Words.dll Represents a section element in a Word document. public class Section : IElement Inheritance object Section Implements IElement Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties ElementId Gets the unique identifier of the section. public int ElementId { get; } Property Value int PageMargin Gets the page margin properties for the section. public PageMargin PageMargin { get; } Property Value PageMargin PageSize Gets the page size properties for the section. public PageSize PageSize { get; } Property Value PageSize"
  },
  "api/FileFormat.Words.IElements.Table.html": {
    "href": "api/FileFormat.Words.IElements.Table.html",
    "title": "Class Table | Words FileFormat",
    "keywords": "Class Table Namespace FileFormat.Words.IElements Assembly FileFormat.Words.dll Represents a table element in a Word document. public class Table : IElement Inheritance object Table Implements IElement Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Table() Initializes a new instance of the Table class with empty rows and default column properties. public Table() Table(int, int) Initializes a new instance of the Table class with a specified number of rows and columns. public Table(int rows, int columns) Parameters rows int The number of rows in the table. columns int The number of columns in the table. Properties Column Gets or sets the column properties of the table. public Column Column { get; set; } Property Value Column ElementId Gets the unique identifier of the table. public int ElementId { get; } Property Value int Rows Gets or sets the list of rows within the table. public List<Row> Rows { get; set; } Property Value List<Row> Style Gets or sets the table style. public string Style { get; set; } Property Value string"
  },
  "api/FileFormat.Words.IElements.Unknown.html": {
    "href": "api/FileFormat.Words.IElements.Unknown.html",
    "title": "Class Unknown | Words FileFormat",
    "keywords": "Class Unknown Namespace FileFormat.Words.IElements Assembly FileFormat.Words.dll Represents an unknown element in a Word document. public class Unknown : IElement Inheritance object Unknown Implements IElement Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties ElementId Gets the unique identifier of the unknown element. public int ElementId { get; } Property Value int"
  },
  "api/FileFormat.Words.IElements.html": {
    "href": "api/FileFormat.Words.IElements.html",
    "title": "IElements Namespace - Word Document Elements | Words FileFormat",
    "keywords": "Namespace FileFormat.Words.IElements Classes Cell Represents a cell within a row of a table in a Word document. Colors Provides predefined colors with hexadecimal values. Column Represents column properties of a table in a Word document. ElementStyles Represents Styles associated with different elements. Headings Provides predefined heading styles. Image Represents an image element in a Word document. Indentation Represents the indentation settings for a paragraph. PageMargin Represents the page margin properties of a section in a Word document. PageSize Represents the page size properties of a section in a Word document. Paragraph Represents a paragraph element in a Word document. Row Represents a row within a table in a Word document. Run Represents a run of text within a paragraph. Section Represents a section element in a Word document. Table Represents a table element in a Word document. Unknown Represents an unknown element in a Word document. Interfaces IElement Represents an element in a Word document. Enums ParagraphAlignment Specifies the alignment of a paragraph within a text block or document."
  },
  "api/FileFormat.Words.html": {
    "href": "api/FileFormat.Words.html",
    "title": "Namespace FileFormat.Words | Words FileFormat",
    "keywords": "Namespace FileFormat.Words Classes Body Represents the body of a document, containing paragraphs, tables, images, and sections. Document Represents a document with structured elements. FileFormatException Custom exception class for file format-related exceptions."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "FileFormat.Words Namespaces, Classes and Interfaces | Words FileFormat",
    "keywords": "FileFormat.Words Namespaces, Classes and Interfaces FileFormat.Words Namespace Classes Body Document FileFormatException FileFormat.Words.IElements Namespace Classes Cell Colors Column ElementStyles Headings IElement Image Indentation PageMargin PageSize Paragraph Row Run Section Table Unknown Interfaces IElement Enums ParagraphAlignment"
  },
  "articles/complexities.html": {
    "href": "articles/complexities.html",
    "title": "Challenges when using OpenXML SDK | Words FileFormat",
    "keywords": "Complexities of OpenXML SDK The OpenXML SDK (Software Development Kit) is a powerful tool for working with Microsoft Office files, particularly for manipulating Word documents in a programmatic way. It allows developers to create, modify, and analyze documents in the Open XML format used by Microsoft Word. While the SDK offers a wide range of capabilities, it comes with certain complexities that developers must be aware of to ensure their documents are correctly structured and behave as expected. In this article, we will explore some of the intricacies and challenges associated with using the OpenXML SDK, and how to overcome them. Sequence Matters The OpenXML SDK is a collection of various XML elements that can be used to create Word documents. One of the most significant complexities is that the SDK does not validate the structure. It allows users to append elements in any sequence they choose. However, this flexibility can lead to issues. For example, appending a child to the Body via OpenXML SDK may place it at the end after the section (represented as SectionProperties in OpenXML SDK), potentialy resulting in a corrupted document. Example: Wrong Element Append // Wrong Append to Body Paragraph paragraph = new Paragraph(); ParagraphProperties paragraphProperties = new ParagraphProperties(); paragraph.Append(paragraphProperties); Body body = mainDocumentPart.Document.Body; body.AppendChild(paragraph); Example: Correct Element Append // Correct Append to Body Paragraph paragraph = new Paragraph(); ParagraphProperties paragraphProperties = new ParagraphProperties(); paragraph.Append(paragraphProperties); Body body = mainDocumentPart.Document.Body; var sectionPropertiesList = body.Elements<WP.SectionProperties>().ToList(); if (sectionPropertiesList.Any()) { var lastSectionProperties = sectionPropertiesList.Last(); body.InsertBefore(paragraph, lastSectionProperties); } FontFamily Placement In OpenXML, the sequence in which you define FontFamily is crucial. Placing FontFamily in RunProperties before any other XML element is vital. If FontFamily is appended after other font attributes, Microsoft Word might overlook the specified FontFamily and default to its standard font (usually Calibri). To prevent this, ensure 'FontFamily' defined in RunFonts is added to RunProperties before any other font-related XML elements within RunProperties. Example: Wrong FontFamily Placement // Wrong FontFamily Placement var wpRunWrong = new WP.Run(); var runPropertiesWrong = new WP.RunProperties(); var colorWrong = new WP.Color { Val = \"#0000FF\" }; runPropertiesWrong.Append(colorWrong); var runFontWrong = new WP.RunFonts { Ascii = \"Arial\" }; runPropertiesWrong.Append(runFontWrong); // Add other font properties as needed Example: Correct FontFamily Placement // Correct FontFamily Placement var wpRunCorrect = new WP.Run(); var runPropertiesCorrect = new WP.RunProperties(); var runFontCorrect = new WP.RunFonts { Ascii = \"Arial\" }; runPropertiesCorrect.Append(runFontCorrect); var colorCorrect = new WP.Color { Val = \"#0000FF\" }; runPropertiesCorrect.Append(colorCorrect); // Add other font properties as needed TableProperties Placement The positioning of table properties is crucial for proper document interpretation in Word. If you append TableProperties after adding the table, row properties, or cell properties, Microsoft Word might overlook these XML elements. To avoid this issue, it is essential to define TableProperties before other related elements, such as rows and cells. Example: Wrong TableProperties Placement // Wrong Table Properties Placement Table tableWrong = new Table(); TableProperties tablePropertiesWrong = new TableProperties(); TableRow tableRowWrong = new TableRow(); TableRowProperties tableRowPropertiesWrong = new TableRowProperties(); TableCell tableCellWrong = new TableCell(); TableCellProperties tableCellPropertiesWrong = new TableCellProperties(); tableCellWrong.Append(tableCellPropertiesWrong); tableRowWrong.Append(tableRowPropertiesWrong); tableRowWrong.Append(tableCellWrong); tableWrong.Append(tableRowWrong); tableWrong.Append(tablePropertiesWrong); Example: Correct TableProperties Placement // Correct Table Properties Placement Table tableCorrect = new Table(); TableProperties tablePropertiesCorrect = new TableProperties(); TableRow tableRowCorrect = new TableRow(); TableRowProperties tableRowPropertiesCorrect = new TableRowProperties(); TableCell tableCellCorrect = new TableCell(); TableCellProperties tableCellPropertiesCorrect = new TableCellProperties(); tableCellCorrect.Append(tableCellPropertiesCorrect); tableRowCorrect.Append(tableRowPropertiesCorrect); tableRowCorrect.Append(tableCellCorrect); tableCorrect.Append(tablePropertiesCorrect); tableCorrect.Append(tableRowCorrect); Overcoming the Challenges To work effectively with the OpenXML SDK, developers need to understand the valid sequences that Microsoft Word can recognize and understand. Failing to follow these sequences can result in unpredictable document behavior. In some cases, Word may attempt to correct the document based on its default behavior, but in the worst cases, the document may become corrupted. One approach to mitigating these complexities is to use a wrapper or library that enforces the correct document structure. Tools like FileFormat.Words provide a higher-level API that simplifies the process of working with OpenXML and ensures that documents adhere to the expected structure. Conclusion In summary, the OpenXML SDK is a valuable resource for working with Word documents, especially for complex tasks. It can load intricate Word documents correctly. However, when creating new documents or updating existing ones, developers must be mindful of the valid append sequences to achieve the desired results. Using FileFormat.Words or understanding Word's expectations for document structure can help streamline the development process and avoid potential pitfalls. With the right knowledge and tools, the OpenXML SDK can be a powerful ally in creating and manipulating Word documents programmatically."
  },
  "articles/design.html": {
    "href": "articles/design.html",
    "title": "Design Patterns Used by Word Document C# API | Words FileFormat",
    "keywords": "System Architecture and Design Patterns Introduction FileFormat.Words is an open source C# Word Document API. The system architecture offers a robust and flexible framework for creating, loading, and manipulating Word documents using C# code. This architecture relies on a set of design patterns that enable efficient document processing while ensuring a user-friendly experience. In this article, we will explore the design patterns used in this architecture and how they contribute to the system's overall effectiveness. Facade Pattern At the heart of the Word Document C# API architecture is the FileFormat.Words.Document class. This class acts as a facade, providing a unified and straightforward interface for users to interact with Word documents. It encapsulates the complexities of working with internal classes, making document creation and modification accessible to developers. This design pattern simplifies the user experience and shields them from the intricacies of the underlying implementation. Custom Objects Pattern The architecture employs custom objects, collectively known as FileFormat.Words.IElements, to represent the various components of a Word document, such as paragraphs, images, and tables. These custom elements mirror the document's structure and serve as a data structure for data transfer to and from OpenXML objects. This pattern enhances user-friendliness, as it provides a higher-level interface for users to interact with the content of Word documents. It abstracts away the complexities of dealing with raw OpenXML, making it easier to work with document content. Bridge Pattern The internal OpenXML.Words.OwDocument class plays a crucial role in bridging the gap between the custom document elements in FileFormat.Words and the OpenXML-based Word document. It serves as the bridge by providing operations for loading existing Word documents into OpenXML and creating new documents from scratch. This design pattern decouples the custom elements from the low-level OpenXML representation, enabling seamless synchronization between the two. It simplifies the process of document creation and modification by acting as an intermediary. Monostate Pattern (For Existing Documents) The internal OpenXML.Words.Data.OoxmlDocData class, designed with the Monostate pattern, facilitates operations like insertion, updating, appending and removal of elements within an existing Word document. While the class is not marked as static, it employs shared state among instances to ensure consistency in document modifications. This pattern proves valuable when working with pre-existing documents that require alterations while adhering to established styles. Synchronization instructions from the FileFormat.Words.Document class guide the actions of individual instances, guaranteeing that changes made to custom objects accurately reflect in the corresponding OpenXML documents. The Monostate pattern optimizes resource utilization and streamlines document processing for managing existing documents. Template Method Pattern (For New Document) The architecture benefits from predefined templates stored in the OpenXML.Templates namespace. These templates, created using OpenXML SDK Productivity Tools, offer essential structures and customization options for document metadata. When creating new Word documents from scratch within the OpenXML.Words.Document class, the template method pattern is applied. It defines the skeleton of the document creation process, adds document properties and metadata. This pattern simplifies the creation of standardized documents and ensures consistency in document structure for new documents. Conclusion The Word Document C# API system architecture employs several design patterns to deliver a powerful yet user-friendly experience for developers working with Word documents in C#. The combination of facade, custom objects, bridge, monostate and template methods simplifies document processing, abstracts complexity, and promotes efficiency. These design patterns are the foundation of an architecture that streamlines the creation, modification, and customization of Word documents, making it a valuable resource for developers in need of document automation and manipulation capabilities."
  },
  "articles/index.html": {
    "href": "articles/index.html",
    "title": "C# Word Document API - Getting Started | Words FileFormat",
    "keywords": "Understanding C# Word API - FileFormat.Words for .NET Overview FileFormat.Words for .NET is a an Open Source API that empowers developers to work with Word documents in their .NET applications. With a user-friendly API, it simplifies the creation, loading, and manipulation of Word documents, making it an invaluable tool for document automation and customization. Whether you need to generate reports, automate document generation, extract data from Word documents, or perform advanced formatting tasks, FileFormat.Words provides the tools and capabilities you require. It abstracts the complexities of working with Word documents, allowing developers to focus on their application logic rather than the intricacies of document processing. System Requirements To use this software, ensure your system meets the following requirements: .NET Core 3.1 and above: The application is built on the .NET Core framework, specifically targeting version 3.1 and newer. At minimum, ensure you have .NET Core installed on your machine before proceeding. Installation Instructions for .NET Core 3.1: For detailed instructions on installing .NET Core 3.1, visit Microsoft's .NET Download page. Compatibility Note: API is compatible with later .NET Framework versions starting .NET Core 3.1. Installation FileFormat.Words is available as NuGet Package and can be installed in one of the below ways. Choose the installation method that best fits your workflow and project requirements. Install via Nuget Console To install FileFormat.Words to the current directory using the Nuget Console, ensure you have the Nuget CLI installed. Execute the following command: nuget install FileFormat.Words ./OutputDir Install via Package Manager Open the Package Manager Console in Visual Studio (Tools > NuGet Package Manager > Package Manager Console). Run the following command to install FileFormat.Words: Install-Package FileFormat.Words Install from within Visual Studio Open Visual Studio. Go to Tools > NuGet Package Manager > Manage NuGet Packages for Solution. In the Browse tab, search for FileFormat.Words. Select the desired version and click \"Install\" to add it to your project. Topics In this section, we'll explore the key features and capabilities of FileFormat.Words for .NET, and how it can enhance your document-related tasks in your .NET projects. FileFormat.Words API Overview FileFormat.Words Design Patterns"
  },
  "articles/introopenxmlsdk.html": {
    "href": "articles/introopenxmlsdk.html",
    "title": "Introduction to OpenXML SDK for Word Documents | Words FileFormat",
    "keywords": "Understanding OpenXML SDK for Word Documents The OpenXML SDK, developed by Microsoft, is a powerful set of tools and libraries that facilitate working with documents in the Open XML format. This format is the foundation for numerous Microsoft Office applications, including Word, Excel, and PowerPoint. The OpenXML SDK empowers developers to engage in programmatic operations, such as creating, modifying, and manipulating documents, providing a versatile resource for customizing and automating document-related tasks. Usage in Word Documents When it comes to Word Documents, the OpenXML SDK shines by enabling developers to interact with the structure and content of Word files. This encompasses a wide range of tasks, including the creation of new documents from scratch, updating existing documents, and managing the insertion and formatting of text, images, tables, and more. With the SDK's capabilities, developers can build applications that dynamically generate and customize Word documents, automate document generation workflows, and extract data from Word files. For businesses and developers seeking to optimize document-related processes and produce rich, structured Word documents programmatically, the OpenXML SDK is an invaluable tool. Topics in this section: Complexities of OpenXML SDK"
  },
  "articles/overview.html": {
    "href": "articles/overview.html",
    "title": "Word Document C# API Outlines | Words FileFormat",
    "keywords": "System Outlines This documentation provides an in-depth overview of the internal namespaces and classes, unveiling the intricacies behind our Word Document C# API system. While the internal structure is complex, we've designed the public APIs to be straightforward and user-friendly, making Word document manipulation a seamless experience. For a more detailed understanding of our system architecture, design patterns, and public interfaces, please visit the Articles Section. FileFormat.Words Namespace Document Class The primary interface for creating, loading, and modifying Word documents. Serves as a facade for interacting with internal classes in the OpenXML.Words, OpenXML.Words.Data, and OpenXML.Templates namespaces. FileFormat.Words.IElements Namespace FileFormat.Words.IElement (Common Interface for all custom elements) Custom elements, such as Paragraphs, Images, and Tables, that mimic Word document structure. Act as a data structure for seamless data transfer to and from OpenXML objects. Offers a user-friendly interface for interacting with Word document content. OpenXML.Words Namespace OwDocument Class (Internal) Facilitates loading existing Word documents into OpenXML and creating new documents from scratch. Acts as a bridge between custom document elements in FileFormat.Words and OpenXML-based Word documents. Sets the WordProcessing package for OpenXML.Words.Data.OOXMLDocData to enable synchronization. Utilizes templates from the OpenXML.Templates namespace for creating new documents. OpenXML.Words.Data Namespace OoxmlDocData Class (Internal) Employs operations for inserting, updating, and removing elements in pre-existing Microsoft Word documents. Receives synchronization instructions from the FileFormat.Words.Document class. Guarantees changes made to custom objects are accurately reflected in the OpenXML document. OpenXML.Templates Namespace Offers pre-defined templates created using OpenXML SDK Productivity Tools. Comprises classes for core properties and custom properties, enhancing document metadata and customization. Templates come into play when creating new Word documents from scratch within the OpenXML.Words.Document class. This extended architecture leverages templates and properties from the OpenXML.Templates namespace, enriching the document creation process with pre-defined structures and metadata customization options for newly created documents. The FileFormat.Words.Document class remains the central interface for users, orchestrating interactions with various internal components across multiple namespaces."
  },
  "index.html": {
    "href": "index.html",
    "title": "C# Word Document API - FileFormat.Words Docs | Words FileFormat",
    "keywords": "C# Word Document API - FileFormat.Words Docs API Reference FileFormat.Words is an Open Source Word Document C# API to simplify the creation, loading, and manipulation of Word documents, making it an invaluable tool for document automation and customization. Please refer to the API Reference to explore the public interfaces in detail. Articles The system architecture relies on a set of design patterns that enable efficient document processing while ensuring a user-friendly experience. In this section, we will explore the system architecture and usage of API details in different scenarios. In addition, we will also discuss the backend engine (OpenXML SDK) FileFormat.Words uses to internally interact with OpenXML objects. Please refer to the Articles to explore articles further."
  }
}